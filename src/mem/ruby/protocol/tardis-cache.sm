
/// Declare a machine with type L1Cache.
machine(MachineType:L1Cache, "MSI cache")
    : Sequencer *sequencer; // Incoming request from CPU come from this
      CacheMemory *cacheMemory; // This stores the data and cache states
      bool send_evictions; // Needed to support O3 CPU and mwait

      int progTS_global := 1;
      // Other declarations
      // Message buffers are required to send and receive data from the Ruby
      // network. The from/to and request/response can be confusing!
      // Virtual networks are needed to prevent deadlock (e.g., it is bad if a
      // response gets stuck behind a stalled request). In this protocol, we are
      // using three virtual networks. The highest priority is responses,
      // followed by forwarded requests, then requests have the lowest priority.


      // Requests *to* the directory
      MessageBuffer * requestToDir, network="To", virtual_network="0",
            vnet_type="request";
      // Responses *to* the directory or other caches
      MessageBuffer * responseToDir, network="To", virtual_network="2",
            vnet_type="response";
      // Responses *from* directory and other caches for this cache's reqs.
      MessageBuffer * responseFromDir, network="From",
            virtual_network="2", vnet_type="response";


      MessageBuffer * requestFromDir, network="From",
            virtual_network="1", vnet_type="response";

      // This is all of the incoming requests from the core via the sequencer
      MessageBuffer * mandatoryQueue;
{
    // Declare the states that this cache will use. These are both stable
    // states (no underscore) and transient states (with underscore). Letters
    // after the underscores are superscript in Sorin et al.
    // Underscores and "desc" are used when generating HTML tables.
    // Access permissions are used for functional accesses. For reads, the
    // functional access reads *all* of the blocks with a matching address that
    // have read-only or read-write permission. For functional writes, all
    // blocks are updated with new data if they have busy, read-only, or
    // read-write permission.
    state_declaration(State, desc="Cache states") {
        I,      AccessPermission:Invalid,
                    desc="Not present/Invalid";

        // States moving out of I
        IS_D,   AccessPermission:Invalid,
                    desc="Invalid, moving to S, waiting for data";
        IE_D,  AccessPermission:Invalid,
                    desc="Invalid, moving to E, waiting for data";

        S,      AccessPermission:Read_Only,
                    desc="Shared. Read-only, other caches may have the block";

        S_expired,   AccessPermission:Invalid,
                      desc="Shared, lease has expired. Must send another request";

        // States moving out of S
        SE_D,  AccessPermission:Read_Only,
                    desc="Shared, moving to E, waiting for 'data'";

        E,      AccessPermission:Read_Write,
                    desc="Exclusive. Read & write permissions. Owner of block";
    }

    // Events that can be triggered on incoming messages. These are the events
    // that will trigger transitions
    enumeration(Event, desc="Cache events") {
        // From the processor/sequencer/mandatory queue
        Load,           desc="Load from processor";
        Store,          desc="Store from processor";
        Expiration,     desc="timestamp expiration";

        // Internal event (only triggered from processor requests)
        Replacement,    desc="Triggered when block is chosen as victim";

        // Network events
        ShareReply,     desc="Incoming data from directory or other cache";
        ExclusiveReply, desc="Incoming data from directory";
        
        FlushRequest,       desc="Invalidate data";
        WritebackRequest,   desc="Send current copy of data, enter state S";
    }

    // A structure for the cache entry. This stores the cache data and state
    // as defined above. You can put any other information here you like.
    // The AbstractCacheEntry is defined in
    // src/mem/ruby/slic_interface/AbstractCacheEntry.hh
    // If you want to use any of the functions in the abstract entry declare
    // them here.
    structure(Entry, desc="Cache entry", interface="AbstractCacheEntry") {
        State CacheState,        desc="cache state";
        DataBlock DataBlk,       desc="Data in the block";
        int readTS,              desc="Read timestamp";
        int writeTS,             desc="Write timestamp";
    }

    // TBE is the "transaction buffer entry". This stores information needed
    // during transient states. This is *like* an MSHR. It functions as an MSHR
    // in this protocol, but the entry is also allocated for other uses.
    structure(TBE, desc="Entry for transient requests") {
        State TBEState,         desc="State of block";
        DataBlock DataBlk,      desc="Data for the block. Needed for MI_A";
        int AcksOutstanding, default=0, desc="Number of acks left to receive.";
    }

    // Table of TBE entries. This is defined externally in
    // src/mem/ruby/structures/TBETable.hh. It is templatized on the TBE
    // structure defined above.
    structure(TBETable, external="yes") {
      TBE lookup(Addr);
      void allocate(Addr);
      void deallocate(Addr);
      bool isPresent(Addr);
    }

    /*************************************************************************/
    // Some declarations of member functions and member variables.

    // The TBE table for this machine. It is templatized under the covers.
    // NOTE: SLICC mangles names with the machine type. Thus, the TBE declared
    //       above will be L1Cache_TBE in C++.
    // We also have to pass through a parameter to the machine to the TBETable.
    TBETable TBEs, template="<L1Cache_TBE>", constructor="m_number_of_TBEs";

    // Declare all of the functions of the AbstractController that we may use
    // in this file.
    // Functions from clocked object
    Tick clockEdge();

    // Functions we must use to set things up for the transitions to execute
    // correctly.
    // These next set/unset functions are used to populate the implicit
    // variables used in actions. This is required when a transition has
    // multiple actions.
    void set_cache_entry(AbstractCacheEntry a);
    void unset_cache_entry();
    void set_tbe(TBE b);
    void unset_tbe();

    // Given an address and machine type this queries the network to check
    // where it should be sent. In a real implementation, this might be fixed
    // at design time, but this function gives us flexibility at runtime.
    // For example, if you have multiple memory channels, this function will
    // tell you which addresses to send to which memory controller.
    MachineID mapAddressToMachine(Addr addr, MachineType mtype);

    // Convience function to look up the cache entry.
    // Needs a pointer so it will be a reference and can be updated in actions
    Entry getCacheEntry(Addr address), return_by_pointer="yes" {
        return static_cast(Entry, "pointer", cacheMemory.lookup(address));
    }

    /*************************************************************************/
    // Functions that we need to define/override to use our specific structures
    // in this implementation.

    // Required function for getting the current state of the block.
    // This is called from the transition to know which transition to execute
    State getState(TBE tbe, Entry cache_entry, Addr addr) {
        // The TBE state will override the state in cache memory, if valid
        if (is_valid(tbe)) { return tbe.TBEState; }
        // Next, if the cache entry is valid, it holds the state
        else if (is_valid(cache_entry)) { return cache_entry.CacheState; }
        // If the block isn't present, then it's state must be I.
        else { return State:I; }
    }


    // Required function for setting the current state of the block.
    // This is called from the transition to set the ending state.
    // Needs to set both the TBE and the cache entry state.
    // This is also called when transitioning to I so it's possible the TBE and/
    // or the cache_entry is invalid.
    void setState(TBE tbe, Entry cache_entry, Addr addr, State state) {
      if (is_valid(tbe)) { tbe.TBEState := state; }
      if (is_valid(cache_entry)) { cache_entry.CacheState := state; }
    }

     

    // Required function to override. Used for functional access to know where
    // the valid data is. NOTE: L1Cache_State_to_permission is automatically
    // created based on the access permissions in the state_declaration.
    // This is mangled by both the MachineType and the name of the state
    // declaration ("State" in this case)
    AccessPermission getAccessPermission(Addr addr) {
        TBE tbe := TBEs[addr];
        if(is_valid(tbe)) {
            return L1Cache_State_to_permission(tbe.TBEState);
        }

        Entry cache_entry := getCacheEntry(addr);
        if(is_valid(cache_entry)) {
            return L1Cache_State_to_permission(cache_entry.CacheState);
        }

        return AccessPermission:NotPresent;
    }

    // Required function to override. Like above function, but sets thte state.
    void setAccessPermission(Entry cache_entry, Addr addr, State state) {
        if (is_valid(cache_entry)) {
            cache_entry.changePermission(L1Cache_State_to_permission(state));
        }
    }

    // Required function to override for functionally reading/writing data.
    // NOTE: testAndRead/Write defined in src/mem/ruby/slicc_interface/Util.hh
    void functionalRead(Addr addr, Packet *pkt) {
        TBE tbe := TBEs[addr];
        if(is_valid(tbe)) {
            testAndRead(addr, tbe.DataBlk, pkt);
        } else {
            testAndRead(addr, getCacheEntry(addr).DataBlk, pkt);
        }
    }

    int functionalWrite(Addr addr, Packet *pkt) {
        TBE tbe := TBEs[addr];
        if(is_valid(tbe)) {
            if (testAndWrite(addr, tbe.DataBlk, pkt)) {
                return 1;
            } else {
                return 0;
            }
        } else {
            if (testAndWrite(addr, getCacheEntry(addr).DataBlk, pkt)) {
                return 1;
            } else {
                return 0;
            }
        }
    }

    /*************************************************************************/
    // Input/output network definitions

    // Output ports. This defines the message types that will flow ocross the
    // output buffers as defined above. These must be "to" networks.
    // "request_out" is the name we'll use later to send requests.
    // "RequestMsg" is the message type we will send (see MSI-msg.sm)
    // "requestToDir" is the name of the MessageBuffer declared above that
    //      we are sending these requests out of.
    out_port(request_out, RequestMsg, requestToDir);
    out_port(response_out, ResponseMsg, responseToDir);

    // Input ports. The order here is/(can be) important. The code in each
    // in_port is executed in the order specified in this file (or by the rank
    // parameter). Thus, we must sort these based on the network priority.
    // In this cache, the order is responses from other caches, forwards, then
    // requests from the CPU.

    // Like the out_port above
    // "response_in" is the name we'll use later when we refer to this port
    // "ResponseMsg" is the type of message we expect on this port
    // "responseFromDirOrSibling" is the name of the buffer this in_port is
    // connected to for responses from other caches and the directory.
    in_port(response_in, ResponseMsg, responseFromDir) {
        // NOTE: You have to check to make sure the message buffer has a valid
        // message at the head. The code in in_port is executed either way.
        if (response_in.isReady(clockEdge())) {
            // Peek is a special function. Any code inside a peek statement has
            // a special variable declared and populated: in_msg. This contains
            // the message (of type RequestMsg in this case) at the head.
            // "forward_in" is the port we want to peek into
            // "RequestMsg" is the type of message we expect.
            peek(response_in, ResponseMsg) {
                // Grab the entry and tbe if they exist.
                Entry cache_entry := getCacheEntry(in_msg.addr);
                TBE tbe := TBEs[in_msg.addr];
                // The TBE better exist since this is a response and we need to
                // be able to check the remaining acks.
                assert(is_valid(tbe));
                if (in_msg.Type == CoherenceResponseType:ShareResponse) {
                  trigger(Event:ShareReply, in_msg.addr, cache_entry, tbe);
                } else if (in_msg.Type == CoherenceResponseType:ExclusiveResponse) {
                  trigger(Event:ExclusiveReply, in_msg.addr, cache_entry, tbe);
                }
            }
        }
    }

    // Requests in from dir

    in_port(request_in, RequestMsg, requestFromDir) {
        if (request_in.isReady(clockEdge())) {
            peek(request_in, RequestMsg) {
                Entry cache_entry := getCacheEntry(in_msg.addr);
                TBE tbe := TBEs[in_msg.addr];
                if (in_msg.Type == CoherenceRequestType:WritebackRequest) {
                    trigger(Event:WritebackRequest, in_msg.addr, cache_entry, tbe);
                } else if (in_msg.Type == CoherenceRequestType:FlushRequest) {
                    trigger(Event:FlushRequest, in_msg.addr, cache_entry, tbe);
                } else{
                    error("Unexpected");
                }
            }
        }
    }

    // The "mandatory queue" is the port/queue from the CPU or other processor.
    // This is *always* a RubyRequest
    in_port(mandatory_in, RubyRequest, mandatoryQueue) {
        if (mandatory_in.isReady(clockEdge())) {
            // Block all requests if there is already an outstanding request
            // that has the same line address. This is unblocked when we
            // finally respond to the request.
            peek(mandatory_in, RubyRequest, block_on="LineAddress") {
                // NOTE: Using LineAddress here to promote smaller requests to
                // full cache block requests.
                Entry cache_entry := getCacheEntry(in_msg.LineAddress);
                TBE tbe := TBEs[in_msg.LineAddress];
                // If there isn't a matching entry and no room in the cache,
                // then we need to find a victim.
                if (is_invalid(cache_entry) &&
                        cacheMemory.cacheAvail(in_msg.LineAddress) == false ) {
                    // make room for the block
                    // The "cacheProbe" function looks at the cache set for
                    // the address and queries the replacement protocol for
                    // the address to replace. It returns the address to repl.
                    Addr addr := cacheMemory.cacheProbe(in_msg.LineAddress);
                    Entry victim_entry := getCacheEntry(addr);
                    TBE victim_tbe := TBEs[addr];
                    trigger(Event:Replacement, addr, victim_entry, victim_tbe);
                } else if ((progTS_global > cache_entry.readTS)&&
                            (in_msg.Type==RubyRequestType:LD || in_msg.Type==RubyRequestType:IFETCH)) {
                    Addr addr := cacheMemory.cacheProbe(in_msg.LineAddress);
                    trigger(Event:Expiration, addr, cache_entry, tbe);
                } else {
                    if (in_msg.Type == RubyRequestType:LD ||
                            in_msg.Type == RubyRequestType:IFETCH) {
                        trigger(Event:Load, in_msg.LineAddress, cache_entry,
                                tbe);
                    } else if (in_msg.Type == RubyRequestType:ST) {
                        trigger(Event:Store, in_msg.LineAddress, cache_entry,
                                tbe);
                    } else {
                        error("Unexpected type from processor");
                    }
                }
            }
        }
    }


    /*************************************************************************/
    // Below are all of the actions that might be taken on a transition.

    // Each actions has a name, a shorthand, and a description.
    // The shorthand is used when generating the HTML tables for the protocol.
    // "\" in the shorthand cause that letter to be bold. Underscores insert a
    // space, ^ makes the rest of the letters superscript.
    // The description is also shown in the HTML table when clicked

    // The first set of actions are things we will do to interact with the
    // rest of the system. Things like sending requests/responses.

    // Action blocks define a number of implicit variables that are useful.
    // These variables come straight from the trigger() call in the in_port
    // blocks.
    // address: The address passed in the trigger (usually the in_msg.addr,
    //          though it can be different. E.g., on a replacement it is the
    //          victim address).
    // cache_entry: The cache entry passed in the trigger call
    // tbe: The TBE passed in the trigger call

    // TODO: write actions
    // Send ShareRequest to TM on load
    action(sendShareRequest_invalid, 'sSRI', desc="Send share request to directory from state I") {
      
        enqueue(request_out, RequestMsg, 1) {
          out_msg.addr := address;
          out_msg.Type := CoherenceRequestType:ShareRequest;
          out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
          out_msg.MessageSize := MessageSizeType:Control;
          out_msg.Requestor := machineID;
          out_msg.writeTS := 0;
          out_msg.readTS := 0;
          out_msg.progTS := progTS_global;
        }
    }
    // Send ExclusiveRequest to TM
    action(sendExclusiveRequest_invalid, 'sERI', desc="Send exclusive request to directory from Invalid") {

      enqueue(request_out, RequestMsg, 1) { 
          out_msg.addr := address;
          out_msg.Type := CoherenceRequestType:ExclusiveRequest;
          out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
          out_msg.MessageSize := MessageSizeType:Control;
          out_msg.Requestor := machineID;
          out_msg.writeTS := 0;
          out_msg.readTS := 0;
          out_msg.progTS := progTS_global;
      }
    }


    action(sendExclusiveRequest_shared, 'sERS', desc="Send exclusive request to directory from shared - lease exp") {

      enqueue(request_out, RequestMsg, 1) { 
          out_msg.addr := address;
          out_msg.Type := CoherenceRequestType:ExclusiveRequest;
          out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
          out_msg.MessageSize := MessageSizeType:Control;
          out_msg.Requestor := machineID;
          out_msg.writeTS := cache_entry.writeTS;
          out_msg.readTS := 0;
          out_msg.progTS := progTS_global;
      }
    }



    action(writeDataToCache, "wd", desc="Write data to the cache") {
        peek(response_in, ResponseMsg) {
            assert(is_valid(cache_entry));
            cache_entry.DataBlk := in_msg.DataBlk;
            cache_entry.readTS := in_msg.readTS;
            cache_entry.writeTS := in_msg.writeTS;
        }
    }

    // Update timestamps
    action(update_after_shload, 'uSL', desc="Update timestamps after load from state shared") {
        if (cache_entry.writeTS > progTS_global) {
           progTS_global:=cache_entry.writeTS; 
        }
    }

    action(update_after_exload, 'uEL', desc="Update timestamps after load from state exclusive") {
        if (cache_entry.readTS < progTS_global) {
          cache_entry.readTS := progTS_global;  
        }     
        if (cache_entry.writeTS > progTS_global) {
          progTS_global:=cache_entry.writeTS; 
        }
    }


    action(update_after_exstore, 'uES', desc="Update timestamps after store from state exclusive") {
        if ((cache_entry.readTS + 1) > progTS_global) {
          progTS_global:=cache_entry.readTS+1;
        }
        cache_entry.readTS := progTS_global;
        cache_entry.writeTS := progTS_global;
    }

    // Send FlushReply to TM
    action(sendFlushReply, 'sFR', desc="Send flush reply to directory") {
        peek(request_in, RequestMsg) {
        enqueue(response_out, ResponseMsg, 1) {
            out_msg.addr := address;
            out_msg.Type := CoherenceResponseType:FlushResponse;
            out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
            out_msg.MessageSize := MessageSizeType:Control;
            out_msg.Sender := machineID;
            out_msg.writeTS := cache_entry.writeTS;
            out_msg.readTS := cache_entry.readTS;
            out_msg.progTS := progTS_global; 
            out_msg.original_requestor := in_msg.original_requestor;
        }
        }

    }
   
    // Send WritebackReply to TM
    action(sendWritebackReply, "sWR", desc="send writeback reply") {
        peek(request_in, RequestMsg) {
        enqueue(response_out, ResponseMsg, 1) {
            out_msg.addr := address;
            out_msg.Type := CoherenceResponseType:WritebackResponse;
            out_msg.Destination.add(mapAddressToMachine(address, MachineType:Directory));
            out_msg.MessageSize := MessageSizeType:Control;
            out_msg.Sender := machineID;
            out_msg.writeTS := cache_entry.writeTS;
            out_msg.readTS := cache_entry.readTS;
            out_msg.progTS := progTS_global;
            out_msg.original_requestor := in_msg.original_requestor; 
        }
        }

    }

    // Responses to CPU requests (e.g., hits and store acks)

    action(loadHit, "Lh", desc="Load hit") {
        assert(is_valid(cache_entry));
        // Set this entry as the most recently used for the replacement policy
        cacheMemory.setMRU(cache_entry);
        // Send the data back to the sequencer/CPU. NOTE: False means it was
        // not an "external hit", but hit in this local cache.
          sequencer.readCallback(address, cache_entry.DataBlk, false);
        
    }


    action(externalLoadHit, "xLh", desc="External load hit (was a miss)") {
        assert(is_valid(cache_entry));
        peek(response_in, ResponseMsg) {
            cacheMemory.setMRU(cache_entry);
            // Forward the type of machine that responded to this request
            // E.g., another cache or the directory. This is used for tracking
            // statistics.
            sequencer.readCallback(address, cache_entry.DataBlk, true,
                                   machineIDToMachineType(in_msg.Sender));
        }
    }

    action(storeHit, "Sh", desc="Store hit") {
        assert(is_valid(cache_entry));
        cacheMemory.setMRU(cache_entry);
        // The same as the read callback above.
        sequencer.writeCallback(address, cache_entry.DataBlk, false);
    }

    action(externalStoreHit, "xSh", desc="External store hit (was a miss)") {
        assert(is_valid(cache_entry));
        peek(response_in, ResponseMsg) {
            cacheMemory.setMRU(cache_entry);
            sequencer.writeCallback(address, cache_entry.DataBlk, true,
                                   // Note: this could be the last ack.
                                   machineIDToMachineType(in_msg.Sender));
        }
    }

    action(forwardEviction, "e", desc="sends eviction notification to CPU") {
        if (send_evictions) {
            sequencer.evictionCallback(address);
        }
    }

    // Cache management actions

    action(allocateCacheBlock, "a", desc="Allocate a cache block") {
        assert(is_invalid(cache_entry));
        assert(cacheMemory.cacheAvail(address));
        // Create a new entry and update cache_entry to the new entry
        set_cache_entry(cacheMemory.allocate(address, new Entry));
    }

    action(deallocateCacheBlock, "d", desc="Deallocate a cache block") {
        assert(is_valid(cache_entry));
        cacheMemory.deallocate(address);
        // clear the cache_entry variable (now it's invalid)
        unset_cache_entry();
    }

    action(allocateTBE, "aT", desc="Allocate TBE") {
        assert(is_invalid(tbe));
        TBEs.allocate(address);
        // this updates the tbe variable for other actions
        set_tbe(TBEs[address]);
    }

    action(deallocateTBE, "dT", desc="Deallocate TBE") {
        assert(is_valid(tbe));
        TBEs.deallocate(address);
        // this makes the tbe varible invalid
        unset_tbe();
    }

    // Queue management actions

    action(popMandatoryQueue, "pQ", desc="Pop the mandatory queue") {
        mandatory_in.dequeue(clockEdge());
    }

    action(popResponseQueue, "pR", desc="Pop the response queue") {
        response_in.dequeue(clockEdge());
    }
  
    action(popRequestQueue, "pRq", desc="pop the request queue") {
        request_in.dequeue(clockEdge());
    }

    // Stalling actions

    action(stall, "z", desc="Stall the incoming request") {
    }

    // TODO write transitions according to table
    // Load, wait for data from TM, then goto shared
    transition(I, Load, IS_D) {
        allocateCacheBlock;
        allocateTBE;
        sendShareRequest_invalid; 
        popMandatoryQueue;
    }


    // Store, wait for data from TM, then goto exclusive
    transition(I, Store, IE_D) {
        allocateCacheBlock;
        allocateTBE;
        sendExclusiveRequest_invalid;
        popMandatoryQueue;
    }

    // Anything while waiting for data to come back from TM
    transition(IS_D, {Load, Store, Replacement}) {
        stall;
    }

    // Data arrives, enter state S
    transition(IS_D, ShareReply, S) {
        writeDataToCache;
        deallocateTBE;
        externalLoadHit;
        update_after_shload;
        popResponseQueue;
    }

    // Load from state shared, pts < rts
    transition(S, Load) {
        update_after_shload;
        loadHit;
        popMandatoryQueue;
    } 

    // Lease has expired, move to I
    transition(S, Expiration, IS_D) {
        forwardEviction;
        deallocateCacheBlock;
        allocateCacheBlock;
        allocateTBE;
        sendShareRequest_invalid; 
        popMandatoryQueue;
    }
    
    //Store from state S, must enter E
    transition(S, Store, SE_D) {
        allocateTBE;
        sendExclusiveRequest_shared;
        popMandatoryQueue;
    }

    // Data arrives, enter state E
    transition(SE_D, ExclusiveReply, E) {
        writeDataToCache;
        deallocateTBE;
        externalStoreHit;
        update_after_exstore;
        popResponseQueue;
    }


    // Data arrives, enter state E
    transition(IE_D, ExclusiveReply, E) {
        writeDataToCache;
        deallocateTBE;
        externalStoreHit;
        update_after_exstore;
        popResponseQueue;
    }

    // Store hit in state E
    transition(E, Store) {
      storeHit;
      forwardEviction;
      popMandatoryQueue;
    }

    // Load hit in state E
    transition(E, Load) {
      update_after_exload;
      loadHit;
      popMandatoryQueue;
    }

    // Receive flush request from TM, enter state I
    transition(E, FlushRequest, I) {
        sendFlushReply;
        deallocateCacheBlock;
        popRequestQueue;
    }

    // Receive writeback request from TM, enter state S
    transition(E, WritebackRequest, S) {
        sendWritebackReply;
        popRequestQueue;

    }

    // Go directly to I when block is replaced. No acks needed
    transition(S, Replacement, I) {
        deallocateCacheBlock;

    }

    // Writeback from state exclusive on eviction
    // Flush Reply
    transition(E, Replacement, I) {
        sendFlushReply;
        deallocateCacheBlock;

    }
  

}
