
machine(MachineType:Directory, "Directory protocol")
    :
      // This "DirectoryMemory" is a little weird. It is initially allocated
      // so that it *can* cover all of memory (i.e., there are pointers for
      // every 64-byte block in memory). However, the entries are lazily
      // created in getDirEntry()
      DirectoryMemory * directory;
      // You can put any parameters you want here. They will be exported as
      // normal SimObject parameters (like in the SimObject description file)
      // and you can set these parameters at runtime via the python config
      // file. If there is no default here (like directory), it is mandatory
      // to set the parameter in the python config. Otherwise, it uses the
      // default value set here.
      Cycles toMemLatency := 1;

    // Response from the directory *to* the cache.
    MessageBuffer *responseToCache, network="To", virtual_network="2",
          vnet_type="response";


    MessageBuffer *requestToCache, network="To", virtual_network="1",
          vnet_type="request";

    // Requests *from* the cache to the directory
    MessageBuffer *requestFromCache, network="From", virtual_network="0",
          vnet_type="request";

    // Responses *from* the cache to the directory
    MessageBuffer *responseFromCache, network="From", virtual_network="3",
          vnet_type="response";


    MessageBuffer * dmaResponseFromDir, network="To", virtual_network="4", vnet_type="response";

    MessageBuffer * dmaRequestToDir, network="From", virtual_network="5", vnet_type="request";

    // Special buffer for memory requests. Kind of like the mandatory queue
    MessageBuffer *requestToMemory;

    // Special buffer for memory responses. Kind of like the mandatory queue
    MessageBuffer *responseFromMemory;



{
    // For many things in SLICC you can specify a default. However, this
    // default must use the C++ name (mangled SLICC name). For the state below
    // you have to use the controller name and the name we use for states.
    state_declaration(State, desc="Directory states",
                      default="Directory_State_I") {
        // Stable states.
        // NOTE: Thise are "cache-centric" states like in Sorin et al.
        // However, The access permissions are memory-centric.
        I, AccessPermission:Read_Write,  desc="Invalid in the caches.";
        S, AccessPermission:Read_Only,   desc="At least one cache has the blk";
        E, AccessPermission:Invalid,     desc="A cache has the block in M";

        // Moving from exclusive to shared, waiting for writeback reply
        E_wb, AccessPermission:Busy,      desc="Waiting for data from owner";

        // Moving from shared to exclusive, waiting for flush reply
        E_fl, AccessPermission:Busy,      desc="Waiting for flush";

        // Transient states
        Sr_mem, AccessPermission:Busy,    desc="Waiting for data from memory";
        S_mem, AccessPermission:Busy,  desc="Waiting for data from memory";
        E_mem, AccessPermission:Busy,  desc="Waiting for data from memory";
        EE_mem, AccessPermission:Busy, desc="Waiting for memack"; 
        ES_mem, AccessPermission:Busy, desc="Waiting for memack"; 
        EI_mem, AccessPermission:Busy, desc="Waiting for memack";

        IDR_mem, AccessPermission:Busy, desc="dma read from I, waiting for mem";
        IDW_mem, AccessPermission:Busy, desc="dma write from I, waiting for mem";
        SDR_mem, AccessPermission:Busy, desc="dma read from S, waiting for mem";
        SDW_mem, AccessPermission:Busy, desc="dma write from S, waiting for mem";
        EDR_core, AccessPermission:Busy, desc="dma read from E, waiting for core";
        EDW_coremem, AccessPermission:Busy, desc="dma write from E, waiting";
        EDW_core, AccessPermission:Busy, desc="dma write from E, waiting for core";
        EDW_mem, AccessPermission:Busy, desc="dma write from E, waiting for mem";
        EDR_mem, AccessPermission:Busy, desc="dma read from E, waiting for mem"; 
    }

    enumeration(Event, desc="Directory events") {
        // Data requests from the cache
        ShareRequest,  desc="Request for read-only data from the cache";
        ExclusiveRequest, desc="Request for read-write data from the cache";
        RenewRequest,     desc="Request for share, still valid";        

        // Responses
        WritebackResponse,  desc="Core writes back cache data";
        FlushResponse,      desc="Core flushes data";
        RenewResponse,      desc="still valid";

        // From Memory
        MemData,      desc="Data from memory";
        MemAck,       desc="Ack from memory that write is complete";


        // DMA stuff
        DMA_READ, desc="dma read memory request";
        DMA_WRITE, desc="dma write memory request";
    }

    // NOTE: We use a netdest for the sharers and the owner so we can simply
    // copy the structure into the message we send as a response.
    structure(Entry, desc="...", interface="AbstractCacheEntry", main="false") {
        State DirState,         desc="Directory state";
        NetDest Owner,          desc="Owner of this block";
        DataBlock DataBlk,      desc="Data in LLC";
        MachineID requestor,       desc="Requestor";
        int readTS,             desc="Read timestamp of this block";
        int writeTS,            desc="Write timestamp of this block";
    }
    
    structure(TBE, desc="TBE for DMA") {
        Addr PhysicalAddress, desc="physical addr";
        State TBEState,     desc = "transient state";
        DataBlock DataBlk,  desc="data";
        int Len,        desc="len";
        MachineID DmaRequestor, desc="DMA requestor";
    }

    structure(TBETable, external="yes") {
        TBE lookup(Addr);
        void allocate(Addr);
        void deallocate(Addr);
        bool isPresent(Addr);
    }

    TBETable TBEs, template="<Directory_TBE>", constructor="m_number_of_TBEs";

    Tick clockEdge();
    void set_tbe(TBE b);
    void unset_tbe();

    // This either returns the valid directory entry, or, if it hasn't been
    // allocated yet, this allocates the entry. This may save some host memory
    // since this is lazily populated.
    Entry getDirectoryEntry(Addr addr), return_by_pointer = "yes" {
        Entry dir_entry := static_cast(Entry, "pointer", directory[addr]);
        if (is_invalid(dir_entry)) {
            // This first time we see this address allocate an entry for it.
            dir_entry := static_cast(Entry, "pointer",
                                     directory.allocate(addr, new Entry));
        }
        return dir_entry;
    }

    /*************************************************************************/
    // Functions that we need to define/override to use our specific structures
    // in this implementation.
    // NOTE: we don't have TBE in this machine, so we don't need to pass it
    // to these overridden functions.

    State getState(TBE tbe, Addr addr) {
      if (is_valid(tbe)) {
        return tbe.TBEState;
      } else if (directory.isPresent(addr)) {
        return getDirectoryEntry(addr).DirState;
      } else {
        return State:I;
      }
    }

    void setState(TBE tbe, Addr addr, State state) {
      if (is_valid(tbe)) {
        tbe.TBEState := state;
      }  
      if (directory.isPresent(addr)) {
        if (state == State:E) {
          assert(getDirectoryEntry(addr).Owner.count() == 1);
        }

        getDirectoryEntry(addr).DirState := state;

        if (state == State:I) {
          assert(getDirectoryEntry(addr).Owner.count() == 0);
        }
      }  

    }

    // This is really the access permissions of memory.
    // TODO: I don't understand this at the directory.
    AccessPermission getAccessPermission(Addr addr) {
        if (directory.isPresent(addr)) {
            Entry e := getDirectoryEntry(addr);
            return Directory_State_to_permission(e.DirState);
        } else  {
            return AccessPermission:NotPresent;
        }
    }
    void setAccessPermission(Addr addr, State state) {
        if (directory.isPresent(addr)) {
            Entry e := getDirectoryEntry(addr);
            e.changePermission(Directory_State_to_permission(state));
        }
    }

    void functionalRead(Addr addr, Packet *pkt) {
        functionalMemoryRead(pkt);
    }

    // This returns the number of writes. So, if we write then return 1
    int functionalWrite(Addr addr, Packet *pkt) {
      int num_functional_writes := 0;

      TBE tbe := TBEs[addr];
      if(is_valid(tbe)) {
        num_functional_writes := num_functional_writes + testAndWrite(addr, tbe.DataBlk, pkt);
      }

      num_functional_writes := num_functional_writes + functionalMemoryWrite(pkt);
      return num_functional_writes;
    }


    /*************************************************************************/
    // Network ports

    out_port(request_out, RequestMsg, requestToCache);
    out_port(response_out, ResponseMsg, responseToCache);
    out_port(memQueue_out, MemoryMsg, requestToMemory);
    out_port(dmaResponseNetwork_out, DMAResponseMsg, dmaResponseFromDir);

    in_port(dmaRequestQueue_in, DMARequestMsg, dmaRequestToDir) {
      if (dmaRequestQueue_in.isReady(clockEdge())) {
        peek(dmaRequestQueue_in, DMARequestMsg) {
          TBE tbe := TBEs[in_msg.LineAddress];
          if (in_msg.Type == DMARequestType:READ) {
            trigger(Event:DMA_READ, in_msg.LineAddress, tbe);
          } else if (in_msg.Type == DMARequestType:WRITE) {
            trigger(Event:DMA_WRITE, in_msg.LineAddress, tbe);
          } else {
            error("Invalid Message");
          }
        }
      }
    }

    in_port(memQueue_in, MemoryMsg, responseFromMemory) {
        if (memQueue_in.isReady(clockEdge())) {
            peek(memQueue_in, MemoryMsg) {
                TBE tbe := TBEs[in_msg.addr];
                if (in_msg.Type == MemoryRequestType:MEMORY_READ) {
                    trigger(Event:MemData, in_msg.addr, tbe);
                } else if (in_msg.Type == MemoryRequestType:MEMORY_WB) {
                    trigger(Event:MemAck, in_msg.addr, tbe);
                } else {
                    error("Invalid message");
                }
            }
        }
    }

    in_port(response_in, ResponseMsg, responseFromCache) {
        if (response_in.isReady(clockEdge())) {
            peek(response_in, ResponseMsg) {
                TBE tbe := TBEs[in_msg.addr];
                if (in_msg.Type == CoherenceResponseType:FlushResponse) {
                    trigger(Event:FlushResponse, in_msg.addr, tbe);
                } else if (in_msg.Type == CoherenceResponseType:WritebackResponse) {
                    trigger(Event:WritebackResponse, in_msg.addr, tbe);
                } else {
                    error("Unexpected message type.");
                }
            }
        }
    }

    in_port(request_in, RequestMsg, requestFromCache) {
        if (request_in.isReady(clockEdge())) {
            peek(request_in, RequestMsg) {
                TBE tbe := TBEs[in_msg.addr];
                Entry entry := getDirectoryEntry(in_msg.addr);
                if (in_msg.Type == CoherenceRequestType:ShareRequest && (in_msg.writeTS != entry.writeTS || in_msg.hasData != 0)) {
                    trigger(Event:ShareRequest, in_msg.addr, tbe);
                } else if (in_msg.Type == CoherenceRequestType:ExclusiveRequest) {
                    trigger(Event:ExclusiveRequest, in_msg.addr, tbe);
                } else if (in_msg.Type == CoherenceRequestType:ShareRequest && in_msg.hasData != 0 && in_msg.writeTS == entry.writeTS && entry.DirState == State:S) {
                    trigger(Event:RenewRequest, in_msg.addr, tbe);
                } else if (in_msg.Type == CoherenceRequestType:ShareRequest && !(entry.DirState == State:S)) {
                    trigger(Event:ShareRequest, in_msg.addr, tbe);
		} else if (in_msg.Type == CoherenceRequestType:ShareRequest) {
		    trigger(Event:ShareRequest, in_msg.addr, tbe);
                } else {
                    error("Unexpected message type.");
                }
            }
        }
    }



    /*************************************************************************/
    // Actions

    // Memory actions.

    action(sendMemRead, "r", desc="Send a memory read request") {
        peek(request_in, RequestMsg) {
            // Send request through special memory request queue. At some
            // point the response will be on the memory response queue.
            // Like enqueue, this takes a latency for the request.
            enqueue(memQueue_out, MemoryMsg, toMemLatency) {
                out_msg.addr := address;
                out_msg.Type := MemoryRequestType:MEMORY_READ;
                out_msg.Sender := in_msg.Requestor;
                out_msg.MessageSize := MessageSizeType:Request_Control;
                out_msg.Len := 0;
            }
        }
    }

    action(sendDataToMem, "w", desc="Write data to memory") {
        peek(response_in, ResponseMsg) {
            DPRINTF(RubySlicc, "Writing memory for %#x\n", address);
            DPRINTF(RubySlicc, "Writing %s\n", in_msg.DataBlk);
            enqueue(memQueue_out, MemoryMsg, toMemLatency) {
                out_msg.addr := address;
                out_msg.Type := MemoryRequestType:MEMORY_WB;
                out_msg.Sender := in_msg.Sender;
                out_msg.MessageSize := MessageSizeType:Writeback_Data;
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.Len := 0;
            }
        }
    }

    action(sendRespDataToMem, "rw", desc="Write data to memory from resp") {
        peek(response_in, ResponseMsg) {
            DPRINTF(RubySlicc, "Writing memory for %#x\n", address);
            DPRINTF(RubySlicc, "Writing %s\n", in_msg.DataBlk);
            enqueue(memQueue_out, MemoryMsg, toMemLatency) {
                out_msg.addr := address;
                out_msg.Type := MemoryRequestType:MEMORY_WB;
                out_msg.Sender := in_msg.Sender;
                out_msg.MessageSize := MessageSizeType:Writeback_Data;
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.Len := 0;
            }
        }
    }

    // Sharer/owner actions


    action(setOwner, "sO", desc="Set the owner") {
        peek(request_in, RequestMsg) {
            getDirectoryEntry(address).Owner.add(in_msg.Requestor);
        }
    }

    action(clearOwner, "cO", desc="Clear the owner") {
        getDirectoryEntry(address).Owner.clear();
    }

    action(popResponseQueue, "pR", desc="Pop the response queue") {
        response_in.dequeue(clockEdge());
    }

    action(popRequestQueue, "pQ", desc="Pop the request queue") {
        request_in.dequeue(clockEdge());
    }

    action(popMemQueue, "pM", desc="Pop the memory queue") {
        memQueue_in.dequeue(clockEdge());
    }

    // Stalling actions
    action(stall, "z", desc="Stall the incoming request") {
        // Do nothing.
    }

    // Make new directory entry - shared
    action(updateTS_loadS, "uTSl", desc="make new directory entry") {
        Entry e := getDirectoryEntry(address);
        peek(request_in, RequestMsg) {
            if (in_msg.progTS + 100 > e.writeTS + 100) {
              e.readTS := in_msg.progTS + 100;
            }
            if (in_msg.progTS + 100 <= e.writeTS + 100) {
              e.readTS := e.writeTS + 100;
            }
        }

    }

    // update timestamps after exclusive 
    action(updateTS_loadE, "uTS", desc="update timestamps") {
        Entry e := getDirectoryEntry(address);
        peek(request_in, RequestMsg) {
            if (e.readTS < in_msg.progTS) {
                e.writeTS := in_msg.progTS;
                e.readTS := in_msg.progTS;
            } else {
                e.readTS := e.readTS + 1;
            } 
        }
    }

    // Send exclusive Reply
    action(sendExclusiveReply, "sER", desc="send exclusive reply to requestor") {
        Entry e := getDirectoryEntry(address);
        peek(memQueue_in, MemoryMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:ExclusiveResponse;
                out_msg.Sender := machineID;
                out_msg.MessageSize := MessageSizeType:Data;
                out_msg.Destination.add(in_msg.OriginalRequestorMachId);
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.readTS := e.readTS;
                out_msg.writeTS := e.writeTS;
            }
        }
    }

    // Send share reply from state S
    action(sendShareReply, "sSR", desc="send share reply from state S") {
        Entry e := getDirectoryEntry(address);
        peek(memQueue_in, MemoryMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:ShareResponse;
                out_msg.Sender := machineID;
                out_msg.Destination.add(in_msg.OriginalRequestorMachId);
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.MessageSize := MessageSizeType:Data;
                out_msg.readTS := e.readTS;
                out_msg.writeTS := e.writeTS;
            }
        }
    }

    // Send writeback request
    action(sendWritebackRequest, "sWB", desc="send writeback request") {
        Entry e := getDirectoryEntry(address);
        peek(request_in, RequestMsg) {
            enqueue(request_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:WritebackRequest;
                out_msg.Requestor := machineID;
                out_msg.MessageSize := MessageSizeType:Control;
                out_msg.Destination := e.Owner;
                out_msg.readTS := in_msg.progTS + 100;
            }
            e.requestor := in_msg.Requestor;
        }        
    }

    // Send flush request
    action(sendFlushRequest, "sFL", desc="send flush request") {
        Entry e := getDirectoryEntry(address);
        peek(request_in, RequestMsg) {
            enqueue(request_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:FlushRequest;
                out_msg.Requestor := machineID;
                out_msg.Destination := e.Owner;
                out_msg.MessageSize := MessageSizeType:Control;
                out_msg.readTS := e.readTS;
            }
            e.requestor := in_msg.Requestor;
        }        
    }

    // Send data to requestor - going to state E
    action(sendExclusiveData, "sED", desc="send data to requestor, going to state E") {
        Entry e := getDirectoryEntry(address);
        peek(response_in, ResponseMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:ExclusiveResponse;
                out_msg.Sender := machineID;
                out_msg.Destination.add(e.requestor);
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.MessageSize := MessageSizeType:Data;
                e.writeTS := in_msg.writeTS;
                e.readTS := in_msg.readTS;
                out_msg.readTS := e.readTS;
                out_msg.writeTS := e.writeTS; 
            }
        } 
    }

    action(sendRenewResponse, "srn", desc="send renew reply") {
        Entry e := getDirectoryEntry(address);
        peek(request_in, RequestMsg) {
          enqueue(response_out, ResponseMsg, 1) {
              out_msg.addr := address;
              out_msg.Type := CoherenceResponseType:RenewResponse;
              out_msg.Sender := machineID;
              out_msg.Destination.add(in_msg.Requestor);
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.readTS := e.readTS;
              out_msg.writeTS := e.writeTS;
          }
        }

    }

    // Send data to requestor - going to state S
    action(sendShareData, "sSD", desc="send data to requestor, going to state S") {
        Entry e := getDirectoryEntry(address);
        peek(response_in, ResponseMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:ShareResponse;
                out_msg.Sender := machineID;
                out_msg.Destination.add(e.requestor);
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.MessageSize := MessageSizeType:Data;
                e.readTS := in_msg.readTS;
                e.writeTS := in_msg.writeTS;
                out_msg.readTS := e.readTS;
                out_msg.writeTS := e.writeTS;
            }
        }
    }

    action(popDMAQueue, "pd", desc="pop dma queue") {
      dmaRequestQueue_in.dequeue(clockEdge());
    }

    action(sendMemRead_DMA, "sMRD", desc="send mem read from dma") { 
        peek(dmaRequestQueue_in, DMARequestMsg) {
            // Send request through special memory request queue. At some
            // point the response will be on the memory response queue.
            // Like enqueue, this takes a latency for the request.
            enqueue(memQueue_out, MemoryMsg, toMemLatency) {
                out_msg.addr := address;
                out_msg.Type := MemoryRequestType:MEMORY_READ;
                out_msg.Sender := in_msg.Requestor;
                out_msg.MessageSize := MessageSizeType:Request_Control;
                out_msg.Len := 0;
            }
        }
    }

    action(allocateTbeDMARead, "atdma", desc="allocate tbe for dma read") {
        peek(dmaRequestQueue_in, DMARequestMsg) {
            TBEs.allocate(address);
            set_tbe(TBEs[address]);
            tbe.DmaRequestor := in_msg.Requestor;
        }
    }

    action(deallocateTbe, "dtbe", desc="deallocate tbe") {
        TBEs.deallocate(address);
        unset_tbe();
    }

    action(allocateTbeDMAWrite, "tbew", desc="allocate tbe for dma write") {
        peek(dmaRequestQueue_in, DMARequestMsg) {
          TBEs.allocate(address);
          set_tbe(TBEs[address]);
          tbe.DataBlk := in_msg.DataBlk;
          tbe.PhysicalAddress := in_msg.PhysicalAddress;
          tbe.Len := in_msg.Len;
          tbe.DmaRequestor := in_msg.Requestor;
        }
  
    }

    action(sendDataToMem_DMA, "smd", desc="dma write to memory") {
        peek(dmaRequestQueue_in, DMARequestMsg) {
            enqueue(memQueue_out, MemoryMsg, toMemLatency) {
                out_msg.addr := address;
                out_msg.Type := MemoryRequestType:MEMORY_WB;
                out_msg.Sender := in_msg.Requestor;
                out_msg.MessageSize := MessageSizeType:Writeback_Data;
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.Len := in_msg.Len;

            }
        }
    }

    action(sendDMAAck, "sdma", desc="send dma ack to dma controller") {
        enqueue(dmaResponseNetwork_out, DMAResponseMsg, 1) {
            assert(is_valid(tbe));
            out_msg.PhysicalAddress := address;
            out_msg.LineAddress := address;
            out_msg.Type := DMAResponseType:ACK;
            out_msg.Destination.add(tbe.DmaRequestor);
            out_msg.MessageSize := MessageSizeType:Writeback_Control;
        }
    }

    action(inc_writeTS, "iwts", desc="increment write ts") {
        Entry e := getDirectoryEntry(address);
        e.writeTS := e.writeTS + 1;
    }

    action(sendFlushRequest_DMA, "sFRDMA", desc="send flush request after dma r/w") {
        Entry e := getDirectoryEntry(address);
        peek(dmaRequestQueue_in, DMARequestMsg) {
            enqueue(request_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:FlushRequest;
                out_msg.Requestor := machineID;
                out_msg.Destination := e.Owner;
                out_msg.MessageSize := MessageSizeType:Control;
                out_msg.readTS := e.readTS;
            }

        }
    }

    
    action(sendDMAData_core, "sDMAC", desc="send data from core to dma") {
        peek(response_in, ResponseMsg) {
            enqueue(dmaResponseNetwork_out, DMAResponseMsg, 1) {
                assert(is_valid(tbe));
                out_msg.PhysicalAddress := address;
                out_msg.LineAddress := address;
                out_msg.Type := DMAResponseType:DATA;
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.Destination.add(tbe.DmaRequestor);
                out_msg.MessageSize := MessageSizeType:Response_Data;
            }
        }
    }

    action(sendMemData_DMA, "smemD", desc="send data from mem to dma") {
        peek(memQueue_in, MemoryMsg) {
            enqueue(dmaResponseNetwork_out, DMAResponseMsg, 1) {
                assert(is_valid(tbe));
                out_msg.PhysicalAddress := address;
                out_msg.LineAddress := address;
                out_msg.Type := DMAResponseType:DATA;
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.Destination.add(tbe.DmaRequestor);
                out_msg.MessageSize := MessageSizeType:Response_Data;
            }
        }

    }

    /*************************************************************************/
    // transitions

    // Receive shared request, send to memory
    transition(I, ShareRequest, S_mem) {
        updateTS_loadS;
        sendMemRead;
        popRequestQueue;
    }

    // Receive dma read from state I
    transition(I, DMA_READ, IDR_mem) {
        allocateTbeDMARead;
        sendMemRead_DMA;
        popDMAQueue;
    }

    // Receive data from mem, send to dma, back to I
    transition(IDR_mem, MemData, I) {
        sendMemData_DMA;
        deallocateTbe;
        popMemQueue;
    }

    // Receive dma write from state I
    transition(I, DMA_WRITE, IDW_mem) {
        allocateTbeDMAWrite;
        sendDataToMem_DMA;
        popDMAQueue;
    }

    // Receive ack from memory, back to I
    transition(IDW_mem, MemAck, I) {
        sendDMAAck;
        deallocateTbe;
        popMemQueue;
    }
    
    // Receive dma read from state S
    transition(S, DMA_READ, SDR_mem) {
        allocateTbeDMARead;
        sendMemRead_DMA;
        popDMAQueue;
    }

    // Receive dma write from state S
    transition(S, DMA_WRITE, SDW_mem) {
        allocateTbeDMAWrite;
        inc_writeTS;
        sendDataToMem_DMA;
        popDMAQueue;
    }

    // Receive mem ack from state S
    transition(SDW_mem, MemAck, I) {
        sendDMAAck;
        deallocateTbe;
        popMemQueue;
    }

    // Receive mem data from state S
    transition(SDR_mem, MemData, S) {
        sendMemData_DMA;
        popMemQueue;
    }

    // Receive dma read from state E
    transition(E, DMA_READ, EDR_core) {
        allocateTbeDMARead;
        sendFlushRequest_DMA;
        clearOwner;
        popDMAQueue;
    }

    // Receive dma write from state E
    transition(E, DMA_WRITE, EDW_coremem) {
        sendFlushRequest_DMA;
        sendDataToMem_DMA;
        clearOwner;
        popDMAQueue;
    }

    // Receive data from core
    transition(EDR_core, FlushResponse, EDR_mem) {
        sendDMAData_core;
        sendRespDataToMem;
        deallocateTbe;
        popResponseQueue;
    }

    transition(EDR_mem, MemAck, I) {
        popMemQueue;
    }

    // Receive data from core
    transition(EDW_coremem, FlushResponse, EDW_mem) {
        popResponseQueue;
    }

    transition(EDW_coremem, MemAck, EDW_core) {
        sendDMAAck;
        popMemQueue;
    }

    transition(EDW_mem, MemAck, I) {
        sendDMAAck;
        popMemQueue;
    }

    transition(EDW_core, FlushResponse, I) {
        popResponseQueue;
    }

    // stall on dma read or write

    // Receive exclusive request, send to memory
    transition(I, ExclusiveRequest, E_mem) {
        updateTS_loadE;
        sendMemRead;
        setOwner;
        popRequestQueue;
    } 

    transition({S_mem, E_mem}, {DMA_WRITE, DMA_READ, ExclusiveRequest, ShareRequest,RenewRequest}) {
        stall;
    }

    // Receive data from memory, move to state S
    transition(S_mem, MemData, S) {
        sendShareReply;
        popMemQueue;
    } 

    transition(E, MemData) {
        stall;

    }

    // Receive data from memory, move to state E
    transition(E_mem, MemData, E) {   
        sendExclusiveReply;
        
        popMemQueue;
    }

//    transition({S_mem, E_mem}, {ExclusiveRequest, ShareRequest}) {
//      stall;
//    }


    // Receive share request from state E, send writeback request
    transition(E, ShareRequest, E_wb) {
        sendWritebackRequest;
        clearOwner;
        popRequestQueue;
    }

    transition(E_wb, {WritebackResponse, FlushResponse}, ES_mem) {
        sendRespDataToMem;
        sendShareData;
        popResponseQueue;
       // probably need more here
    }

    transition(ES_mem, MemAck, S) {
        popMemQueue;
    }

    // Receive exclusive request from state E, send flush request
    transition(E, ExclusiveRequest, E_fl) {
        sendFlushRequest;
        clearOwner;
        setOwner;
        popRequestQueue;
    }

    transition(E_fl, FlushResponse, EE_mem) {
        sendRespDataToMem;
        sendExclusiveData;
        popResponseQueue;
    }

    transition(EE_mem, MemAck, E) {
        popMemQueue;
    }

    transition(E, FlushResponse, EI_mem) {
        clearOwner;
        sendDataToMem
        popResponseQueue;
    }

    transition({E_fl, E_wb}, {ShareRequest, ExclusiveRequest, DMA_READ, DMA_WRITE}) {
        stall;
    }

    transition({EDR_core, EDW_coremem, EDW_core}, {ExclusiveRequest, ShareRequest, WritebackResponse, DMA_READ, DMA_WRITE}) {
      stall;
    }

    transition({IDR_mem, IDW_mem, SDR_mem, SDW_mem, EDW_mem, EDR_mem, Sr_mem, EI_mem, EE_mem, ES_mem}, {ExclusiveRequest, ShareRequest, FlushResponse, WritebackResponse, DMA_READ, DMA_WRITE, RenewRequest}) {
        stall;
    }

    transition(EI_mem, MemAck, I) {
        popMemQueue;
    }


    // TODO add upgrade requests somehow
    // Receive exclusive request from state S, send exclusive reply
    transition(S, ExclusiveRequest, E_mem) {
        updateTS_loadE;
        sendMemRead;
        setOwner;
        popRequestQueue;
    }
    
    // TODO add renew requests somehow
    // Receive shared request from state S, send shared reply
    transition(S, ShareRequest, Sr_mem) {
        updateTS_loadS;
        sendMemRead;
        popRequestQueue;
    }  


    transition(S, RenewRequest, S) {
        updateTS_loadS;
        sendRenewResponse;
        popRequestQueue;
    }

    transition(Sr_mem, MemData, S) {
        sendShareReply;
        popMemQueue;
    }


}
