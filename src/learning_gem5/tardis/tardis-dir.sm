
machine(MachineType:Directory, "Directory protocol")
    :
      // This "DirectoryMemory" is a little weird. It is initially allocated
      // so that it *can* cover all of memory (i.e., there are pointers for
      // every 64-byte block in memory). However, the entries are lazily
      // created in getDirEntry()
      DirectoryMemory * directory;
      // You can put any parameters you want here. They will be exported as
      // normal SimObject parameters (like in the SimObject description file)
      // and you can set these parameters at runtime via the python config
      // file. If there is no default here (like directory), it is mandatory
      // to set the parameter in the python config. Otherwise, it uses the
      // default value set here.
      Cycles toMemLatency := 1;

    // Forwarding requests from the directory *to* the caches.
    MessageBuffer *forwardToCache, network="To", virtual_network="1",
          vnet_type="forward";
    // Response from the directory *to* the cache.
    MessageBuffer *responseToCache, network="To", virtual_network="2",
          vnet_type="response";

    // Requests *from* the cache to the directory
    MessageBuffer *requestFromCache, network="From", virtual_network="0",
          vnet_type="request";

    // Responses *from* the cache to the directory
    MessageBuffer *responseFromCache, network="From", virtual_network="2",
          vnet_type="response";

    // Special buffer for memory requests. Kind of like the mandatory queue
    MessageBuffer *requestToMemory;

    // Special buffer for memory responses. Kind of like the mandatory queue
    MessageBuffer *responseFromMemory;

    int memTS;

{
    // For many things in SLICC you can specify a default. However, this
    // default must use the C++ name (mangled SLICC name). For the state below
    // you have to use the controller name and the name we use for states.
    state_declaration(State, desc="Directory states",
                      default="Directory_State_I") {
        // Stable states.
        // NOTE: Thise are "cache-centric" states like in Sorin et al.
        // However, The access permissions are memory-centric.
        I, AccessPermission:Read_Write,  desc="Invalid in the caches.";
        S, AccessPermission:Read_Only,   desc="At least one cache has the blk";
        M, AccessPermission:Invalid,     desc="A cache has the block in M";

        // Moving from exclusive to shared, waiting for writeback reply
        E_wb, AccessPermission:Busy,      desc="Waiting for data from owner";

        // Moving from shared to exclusive, waiting for flush reply
        E_fl, AccessPermission:Busy,      desc="Waiting for flush";

        // Transient states
        S_mem, AccessPermission:Invalid,  desc="Waiting for data from memory";
        E_mem, AccessPermission:Invalid,  desc="Waiting for data from memory"; 
    }

    enumeration(Event, desc="Directory events") {
        // Data requests from the cache
        ShareRequest,  desc="Request for read-only data from the cache";
        ExclusiveRequest, desc="Request for read-write data from the cache";
        
        // Responses
        WritebackResponse,  desc="Core writes back cache data";
        FlushResponse,      desc="Core flushes data";


        // From Memory
        MemData,      desc="Data from memory";
        MemAck,       desc="Ack from memory that write is complete";
    }

    // NOTE: We use a netdest for the sharers and the owner so we can simply
    // copy the structure into the message we send as a response.
    structure(Entry, desc="...", interface="AbstractCacheEntry", main="false") {
        State DirState,         desc="Directory state";
        NetDest Owner,          desc="Owner of this block";
        DataBlock DataBlk,      desc="Data in LLC";
        int readTS,             desc="Read timestamp of this block";
        int writeTS,            desc="Write timestamp of this block";
    }

    Tick clockEdge();

    // This either returns the valid directory entry, or, if it hasn't been
    // allocated yet, this allocates the entry. This may save some host memory
    // since this is lazily populated.
    Entry getDirectoryEntry(Addr addr), return_by_pointer = "yes" {
        Entry dir_entry := static_cast(Entry, "pointer", directory[addr]);
        if (is_invalid(dir_entry)) {
            // This first time we see this address allocate an entry for it.
            dir_entry := static_cast(Entry, "pointer",
                                     directory.allocate(addr, new Entry));
        }
        return dir_entry;
    }

    /*************************************************************************/
    // Functions that we need to define/override to use our specific structures
    // in this implementation.
    // NOTE: we don't have TBE in this machine, so we don't need to pass it
    // to these overridden functions.

    State getState(Addr addr) {
        if (directory.isPresent(addr)) {
            return getDirectoryEntry(addr).DirState;
        } else {
            return State:I;
        }
    }

    void setState(Addr addr, State state) {
        if (directory.isPresent(addr)) {
            if (state == State:M) {
                DPRINTF(RubySlicc, "Owner %s\n", getDirectoryEntry(addr).Owner);
                assert(getDirectoryEntry(addr).Owner.count() == 1);
                assert(getDirectoryEntry(addr).Sharers.count() == 0);
            }
            getDirectoryEntry(addr).DirState := state;
            if (state == State:I)  {
                assert(getDirectoryEntry(addr).Owner.count() == 0);
                assert(getDirectoryEntry(addr).Sharers.count() == 0);
            }
        }
    }

    // This is really the access permissions of memory.
    // TODO: I don't understand this at the directory.
    AccessPermission getAccessPermission(Addr addr) {
        if (directory.isPresent(addr)) {
            Entry e := getDirectoryEntry(addr);
            return Directory_State_to_permission(e.DirState);
        } else  {
            return AccessPermission:NotPresent;
        }
    }
    void setAccessPermission(Addr addr, State state) {
        if (directory.isPresent(addr)) {
            Entry e := getDirectoryEntry(addr);
            e.changePermission(Directory_State_to_permission(state));
        }
    }

    void functionalRead(Addr addr, Packet *pkt) {
        functionalMemoryRead(pkt);
    }

    // This returns the number of writes. So, if we write then return 1
    int functionalWrite(Addr addr, Packet *pkt) {
        if (functionalMemoryWrite(pkt)) {
            return 1;
        } else {
            return 0;
        }
    }


    /*************************************************************************/
    // Network ports

    out_port(forward_out, RequestMsg, forwardToCache);
    out_port(response_out, ResponseMsg, responseToCache);
    out_port(memQueue_out, MemoryMsg, requestToMemory);

    in_port(memQueue_in, MemoryMsg, responseFromMemory) {
        if (memQueue_in.isReady(clockEdge())) {
            peek(memQueue_in, MemoryMsg) {
                if (in_msg.Type == MemoryRequestType:MEMORY_READ) {
                    trigger(Event:MemData, in_msg.addr);
                } else if (in_msg.Type == MemoryRequestType:MEMORY_WB) {
                    trigger(Event:MemAck, in_msg.addr);
                } else {
                    error("Invalid message");
                }
            }
        }
    }

    in_port(response_in, ResponseMsg, responseFromCache) {
        if (response_in.isReady(clockEdge())) {
            peek(response_in, ResponseMsg) {
                if (in_msg.Type == CoherenceResponseType:Data) {
                    trigger(Event:Data, in_msg.addr);
                } else {
                    error("Unexpected message type.");
                }
            }
        }
    }

    in_port(request_in, RequestMsg, requestFromCache) {
        if (request_in.isReady(clockEdge())) {
            peek(request_in, RequestMsg) {
                Entry entry := getDirectoryEntry(in_msg.addr);
                if (in_msg.Type == CoherenceRequestType:GetS) {
                    // NOTE: Since we don't have a TBE in this machine, there
                    // is no need to pass a TBE into trigger. Also, for the
                    // directory there is no cache entry.
                    trigger(Event:GetS, in_msg.addr);
                } else if (in_msg.Type == CoherenceRequestType:GetM) {
                    trigger(Event:GetM, in_msg.addr);
                } else if (in_msg.Type == CoherenceRequestType:PutS) {
                    assert(is_valid(entry));
                    // If there is only a single sharer (i.e., the requestor)
                    if (entry.Sharers.count() == 1) {
                        assert(entry.Sharers.isElement(in_msg.Requestor));
                        trigger(Event:PutSLast, in_msg.addr);
                    } else {
                        trigger(Event:PutSNotLast, in_msg.addr);
                    }
                } else if (in_msg.Type == CoherenceRequestType:PutM) {
                    assert(is_valid(entry));
                    if (entry.Owner.isElement(in_msg.Requestor)) {
                        trigger(Event:PutMOwner, in_msg.addr);
                    } else {
                        trigger(Event:PutMNonOwner, in_msg.addr);
                    }
                } else {
                    error("Unexpected message type.");
                }
            }
        }
    }



    /*************************************************************************/
    // Actions

    // Memory actions.

    action(sendMemRead, "r", desc="Send a memory read request") {
        peek(request_in, RequestMsg) {
            // Send request through special memory request queue. At some
            // point the response will be on the memory response queue.
            // Like enqueue, this takes a latency for the request.
            enqueue(memQueue_out, MemoryMsg, toMemLatency) {
                out_msg.addr := address;
                out_msg.Type := MemoryRequestType:MEMORY_READ;
                out_msg.Sender := in_msg.Requestor;
                out_msg.MessageSize := MessageSizeType:Request_Control;
                out_msg.Len := 0;
            }
        }
    }

    action(sendDataToMem, "w", desc="Write data to memory") {
        peek(request_in, RequestMsg) {
            DPRINTF(RubySlicc, "Writing memory for %#x\n", address);
            DPRINTF(RubySlicc, "Writing %s\n", in_msg.DataBlk);
            enqueue(memQueue_out, MemoryMsg, toMemLatency) {
                out_msg.addr := address;
                out_msg.Type := MemoryRequestType:MEMORY_WB;
                out_msg.Sender := in_msg.Requestor;
                out_msg.MessageSize := MessageSizeType:Writeback_Data;
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.Len := 0;
            }
        }
    }

    action(sendRespDataToMem, "rw", desc="Write data to memory from resp") {
        peek(response_in, ResponseMsg) {
            DPRINTF(RubySlicc, "Writing memory for %#x\n", address);
            DPRINTF(RubySlicc, "Writing %s\n", in_msg.DataBlk);
            enqueue(memQueue_out, MemoryMsg, toMemLatency) {
                out_msg.addr := address;
                out_msg.Type := MemoryRequestType:MEMORY_WB;
                out_msg.Sender := in_msg.Sender;
                out_msg.MessageSize := MessageSizeType:Writeback_Data;
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.Len := 0;
            }
        }
    }

    // Sharer/owner actions

    action(addReqToSharers, "aS", desc="Add requestor to sharer list") {
        peek(request_in, RequestMsg) {
            getDirectoryEntry(address).Sharers.add(in_msg.Requestor);
        }
    }

    action(setOwner, "sO", desc="Set the owner") {
        peek(request_in, RequestMsg) {
            getDirectoryEntry(address).Owner.add(in_msg.Requestor);
        }
    }

    action(addOwnerToSharers, "oS", desc="Add the owner to sharers") {
        Entry e := getDirectoryEntry(address);
        assert(e.Owner.count() == 1);
        e.Sharers.addNetDest(e.Owner);
    }

    action(removeReqFromSharers, "rS", desc="Remove requestor from sharers") {
        peek(request_in, RequestMsg) {
            getDirectoryEntry(address).Sharers.remove(in_msg.Requestor);
        }
    }

    action(clearSharers, "cS", desc="Clear the sharer list") {
        getDirectoryEntry(address).Sharers.clear();
    }

    action(clearOwner, "cO", desc="Clear the owner") {
        getDirectoryEntry(address).Owner.clear();
    }

    // Invalidates and forwards

    action(sendInvToSharers, "i", desc="Send invalidate to all sharers") {
        peek(request_in, RequestMsg) {
            enqueue(forward_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:Inv;
                out_msg.Requestor := in_msg.Requestor;
                out_msg.Destination := getDirectoryEntry(address).Sharers;
                out_msg.MessageSize := MessageSizeType:Control;
            }
        }
    }

    action(sendFwdGetS, "fS", desc="Send forward getS to owner") {
        assert(getDirectoryEntry(address).Owner.count() == 1);
        peek(request_in, RequestMsg) {
            enqueue(forward_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:GetS;
                out_msg.Requestor := in_msg.Requestor;
                out_msg.Destination := getDirectoryEntry(address).Owner;
                out_msg.MessageSize := MessageSizeType:Control;
            }
        }
    }

    action(sendFwdGetM, "fM", desc="Send forward getM to owner") {
        assert(getDirectoryEntry(address).Owner.count() == 1);
        peek(request_in, RequestMsg) {
            enqueue(forward_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:GetM;
                out_msg.Requestor := in_msg.Requestor;
                out_msg.Destination := getDirectoryEntry(address).Owner;
                out_msg.MessageSize := MessageSizeType:Control;
            }
        }
    }

    // Responses to requests

    // This also needs to send along the number of sharers!!!!
    action(sendDataToReq, "d", desc="Send data from memory to requestor. ") {
                                    //"May need to send sharer number, too") {
        peek(memQueue_in, MemoryMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:Data;
                out_msg.Sender := machineID;
                out_msg.Destination.add(in_msg.OriginalRequestorMachId);
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.MessageSize := MessageSizeType:Data;
                Entry e := getDirectoryEntry(address);
                // Only need to include acks if we are the owner.
                if (e.Owner.isElement(in_msg.OriginalRequestorMachId)) {
                    out_msg.Acks := e.Sharers.count();
                } else {
                    out_msg.Acks := 0;
                }
                assert(out_msg.Acks >= 0);
            }
        }
    }

    action(sendPutAck, "a", desc="Send the put ack") {
        peek(request_in, RequestMsg) {
            enqueue(forward_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:PutAck;
                out_msg.Requestor := machineID;
                out_msg.Destination.add(in_msg.Requestor);
                out_msg.MessageSize := MessageSizeType:Control;
            }
        }
    }

    // Queue management

    action(popResponseQueue, "pR", desc="Pop the response queue") {
        response_in.dequeue(clockEdge());
    }

    action(popRequestQueue, "pQ", desc="Pop the request queue") {
        request_in.dequeue(clockEdge());
    }

    action(popMemQueue, "pM", desc="Pop the memory queue") {
        memQueue_in.dequeue(clockEdge());
    }

    // Stalling actions
    action(stall, "z", desc="Stall the incoming request") {
        // Do nothing.
    }

    // Make new directory entry - shared
    action(updateTS_loadS, "uTSl", desc="make new directory entry") {
        Entry e := getDirectoryEntry(address);
        peek(request_in, RequestMsg) {
            if (in_msg.progTS + 10 > e.writeTS + 10) e.readTS := in_msg.progTS + 10;
            if (in_msg.progTS + 10 <= e.writeTS + 10) e.readTS := e.writeTS + 10;

        }

    }

    // update timestamps after exclusive 
    action(updateTS_loadE, "uTS", desc="update timestamps") {
        Entry e := getDirectoryEntry(address);
        peek(request_in, RequestMsg) {
            e.writeTS = in_msg.writeTS;
            e.readTS = in_mst.readTS;
        }
    }

    // Send exclusive Reply
    action(sendExclusiveReply, "sER", desc="send exclusive reply to requestor") {
        Entry e := getDirectoryEntry(address);
        peek(memQueue_in, MemoryMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:Data;
                out_msg.Sender := machineID;
                out_msg.Destination.add(in_msg.OriginalRequestorMachID);
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.readTS := e.readTS;
                out_msg.writeTS := e.writeTS;
            }
        }
    }

    // Send share reply from state S
    action(sendShareReply, "sSR", desc="send share reply from state S") {
        Entry e := getDirectoryEntry(address);
        peek(memQueue_in, MemoryMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:ShareResponse;
                out_msg.Sender := machineID;
                out_msg.Destination.add(in_msg.OriginalRequestorMachID);
                out_msg.DataBlk := in_msg.DataBlk;
                out_msg.readTS := e.readTS;
                out_msg.writeTS := e.writeTS;
            }
        }
    }

    // Send writeback request
    action(sendWritebackRequest, "sWB", desc="send writeback request") {
        Entry e := getDirectoryEntry(address);
        peek(request_in, RequestMsg) {
            enqueue(request_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:WritebackRequest;
                out_msg.Sender := machineID;
                out_msg.Destination.add(e.Owner);
                out_msg.readTS := in_msg.progTS + 10;
                out_msg.original_requestor := in_msg.Sender;
            }
        }        
    }

    // Send flush request
    action(sendFlushRequest, "sFL", desc="send flush request") {
        Entry e := getDirectoryEntry(address);
        peek(request_in, RequestMsg) {
            enqueue(request_out, RequestMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceRequestType:FlushRequest;
                out_msg.Requestor := machineID;
                out_msg.Destination.add(e.Owner);
                out_msg.original_requestor := in_msg.Requestor;
                out_msg.readTS := e.readTS;
            }
        }        
    }

    // Send data to requestor - going to state E
    action(sendExclusiveData, "sED", desc="send data to requestor, going to state E") {
        Entry e := getDirectoryEntry(address);
        peek(response_in, ResponseMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResposeType:ExclusiveResponse;
                out_msg.Sender := machineID;
                out_msg.Destination.add(in_mst.original_requestor);
                out_msg.DataBlock := in_msg.DataBlock;
                e.writeTS := in_msg.writeTS;
                e.readTS := in_msg.readTS;
                out_msg.readTS := e.readTS;
                out_msg.writeTS := e.writeTS; 
            }
        } 
    }

    // Send data to requestor - going to state S
    action(sendShareData, "sSD", desc="send data to requestor, going to state S") {
        peek(response_in, ResponseMsg) {
            enqueue(response_out, ResponseMsg, 1) {
                out_msg.addr := address;
                out_msg.Type := CoherenceResponseType:ShareResponse;
                out_msg.Sender := machineID;
                out_msg.Destination.add(in_msg.original_requestor);
                out_msg.DataBlock := in_msg.DataBlock;
                e.readTS := in_msg.readTS;
                e.writeTS := in_msg.writeTS;
                out_msg.readTS := e.readTS;
                out_msg.writeTS := e.writeTS;
            }
        }
    }

    /*************************************************************************/
    // transitions

    // Receive shared request, send to memory
    transition(I, ShareRequest, S_mem) {
        updateTS_loadS;
        sendMemRead;
        popRequestQueue;
    }

    // Receive exclusive request, send to memory
    transition(I, ExclusiveRequest, E_mem) {
        updateTS_loadE;
        sendMemRead;
        popRequestQueue;
    } 

    // Receive data from memory, move to state S
    transition(S_mem, MemData, S) {
        sendShareReply;
        popMemQueue;
    } 

    // Receive data from memory, move to state E
    transition(E_mem, MemData, E) {   
        sendExclusiveReply;
        setOwner;
        popMemQueue;
    }

    // Receive share request from state S
    transition(S, ShareRequest, S_mem) {
        updateTS_loadS;
        sendMemRead;
        popRequestQueue;
    }

    // Receive exclusive request from state S
    transition(S, ExclusiveRequest, E) {
        sendExclusiveReply;
        popRequestQueue;
    }

    // Receive share request from state E, send writeback request
    transition(E, ShareRequest, E_wb) {
        sendWritebackRequest;
        popRequestQueue;
    }

    transition(E_wb, WritebackReply, S) {
        sendDataToMem;
        popRequestQueue;
        sendShDataToReq;
        // probably need more here
    }

    // Receive exclusive request from state E, send flush request
    transition(E, ExclusiveRequest, E_fl) {
        sendFlushRequest;
        popRequestQueue;
    }

    transition(E_fl, FlushReply, E) {
        sendDataToMem;
        popRequestQueue;
        sendExDataToReq;
    }


    // TODO add upgrade requests somehow
    // Receive exclusive request from state S, send exclusive reply
    transition(S, ExclusiveRequest, E) {
        sendExclusiveReply;
        setOwner;
        popRequestQueue;
    }
    
    // TODO add renew requests somehow
    // Receive shared request from state S, send shared reply
    transition(S, SharedRequest, Sr_mem) {
        sendMemRead;
        popRequestQueue;
    }  
    transition(Sr_mem, MemData, S) {
        sendShareReply_S;
        popMemQueue;
    }

}
